*** a/scripts/smoke_test_refactor.py
--- b/scripts/smoke_test_refactor.py
***************
*** 21,26 ****
--- 21,28 ----
  from ai_analyzer import AIAnalyzer

  # ----------------------------
  # Helpers de MOCK
  # ----------------------------
+ # Nota: este parche a√±ade verificaciones de la capa analyst-friendly.

  class _DummyChoices:
      def __init__(self, content: str):
          self.message = type("M", (), {"content": content})
***************
*** 68,78 ****
      def _fake_cc_create(*args, **kwargs):
          content = (
              "üîé An√°lisis (MOCK)\n\n"
              ":dardo: Foco en mercado B2B\n"
              "No specific competitors mentioned.\n"
              ":gr√°fico_de_barras: Crecimiento positivo.\n"
              ":cohete: Pr√≥ximos pasos: levantar ronda.\n"
          )
          return _DummyResp(content)

      analyzer.client.chat.completions.create = _fake_cc_create  # type: ignore
--- 70,85 ----
      def _fake_cc_create(*args, **kwargs):
          content = (
              "üîé An√°lisis (MOCK)\n\n"
+             "[COMPLETENESS-GUARD] The deck appears to be missing sections: team, competition, risks, why_now.\n"
              ":dardo: Foco en mercado B2B\n"
              "No specific competitors mentioned.\n"
              ":gr√°fico_de_barras: Crecimiento positivo.\n"
              ":cohete: Pr√≥ximos pasos: levantar ronda.\n"
+             "\n**Next Steps:**\n"
+             "‚Ä¢ Placeholder pasos t√©cnicos (/ask, /gaps, /reset)\n"
          )
          return _DummyResp(content)

      analyzer.client.chat.completions.create = _fake_cc_create  # type: ignore
***************
*** 112,117 ****
--- 119,153 ----
      print("‚úÖ An√°lisis generado")

      print("üé® Verificando emojis Unicode‚Ä¶")
      _assert_emojis_unicode(analysis_text)
      print("‚úÖ Emojis Unicode OK")
+
+     # ---- NUEVAS VERIFICACIONES ANALYST-FRIENDLY ----
+     print("üßº Verificando que no hay leak de COMPLETENESS-GUARD‚Ä¶")
+     assert "[COMPLETENESS-GUARD]" not in analysis_text, "Qued√≥ el bloque de meta [COMPLETENESS-GUARD]"
+     print("‚úÖ Sin meta prompt leaks")
+
+     print("‚ö†Ô∏è Verificando bloque de Missing Sections humano‚Ä¶")
+     assert "Missing Sections in Deck" in analysis_text, "Falta el bloque humano de secciones faltantes"
+     assert "team" in analysis_text.lower() and "competition" in analysis_text.lower(), "No lista las secciones faltantes esperadas"
+     print("‚úÖ Bloque Missing Sections presente")
+
+     print("üìù Verificando Analyst Notes‚Ä¶")
+     # Buscamos un patr√≥n de Analyst Note inyectado (heur√≠stico)
+     assert "Analyst Note" in analysis_text, "No se inyect√≥ Analyst Note"
+     print("‚úÖ Analyst Notes presentes")
+
+     print("üß≠ Verificando Next Steps accionables‚Ä¶")
+     lower = analysis_text.lower()
+     assert "/ask" not in lower and "/gaps" not in lower and "/reset" not in lower, "Siguen apareciendo comandos internos en Next Steps"
+     # Esperamos frases t√≠picas del parche
+     expected_snippets = [
+         "request 12‚Äì24m p&l", "competitive landscape", "gtm plan", "cap table",
+     ]
+     assert any(s in lower for s in expected_snippets), "Next Steps no contiene acciones concretas esperadas"
+     print("‚úÖ Next Steps accionables OK")

      print("üß© Verificando completeness-guard‚Ä¶")
      _assert_not_found_substitution(analysis_text)
      print("‚úÖ 'Not found in deck' presente cuando falta secci√≥n")
